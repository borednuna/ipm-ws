// generated from rosidl_adapter/resource/msg.idl.em
// with input from vision_msgs/msg/VisionInfo.msg
// generated code does not contain a copyright notice

#include "std_msgs/msg/Header.idl"

module vision_msgs {
  module msg {
    @verbatim (language="comment", text=
      "Provides meta-information about a visual pipeline." "\n"
      "" "\n"
      "This message serves a similar purpose to sensor_msgs/CameraInfo, but instead" "\n"
      "  of being tied to hardware, it represents information about a specific" "\n"
      "  computer vision pipeline. This information stays constant (or relatively" "\n"
      "  constant) over time, and so it is wasteful to send it with each individual" "\n"
      "  result. By listening to these messages, subscribers will receive" "\n"
      "  the context in which published vision messages are to be interpreted." "\n"
      "Each vision pipeline should publish its VisionInfo messages to its own topic," "\n"
      "  in a manner similar to CameraInfo.")
    struct VisionInfo {
      @verbatim (language="comment", text=
        "Used for sequencing")
      std_msgs::msg::Header header;

      @verbatim (language="comment", text=
        "Name of the vision pipeline. This should be a value that is meaningful to an" "\n"
        "  outside user.")
      string method;

      @verbatim (language="comment", text=
        "Location where the metadata database is stored. The recommended location is" "\n"
        "  as an XML string on the ROS parameter server, but the exact implementation" "\n"
        "  and information is left up to the user." "\n"
        "The database should store information attached to class ids. Each" "\n"
        "  class id should map to an atomic, visually recognizable element. This" "\n"
        "  definition is intentionally vague to allow extreme flexibility. The" "\n"
        "  elements could be classes in a pixel segmentation algorithm, object classes" "\n"
        "  in a detector, different people's faces in a face detection algorithm, etc." "\n"
        "  Vision pipelines report results in terms of numeric IDs, which map into" "\n"
        "  this  database." "\n"
        "The information stored in this database is, again, left up to the user. The" "\n"
        "  database could be as simple as a map from ID to class name, or it could" "\n"
        "  include information such as object meshes or colors to use for" "\n"
        "  visualization.")
      string database_location;

      @verbatim (language="comment", text=
        "Metadata database version. This counter is incremented" "\n"
        "  each time the pipeline begins using a new version of the database (useful" "\n"
        "  in the case of online training or user modifications)." "\n"
        "  The counter value can be monitored by listeners to ensure that the pipeline" "\n"
        "  and the listener are using the same metadata.")
      int32 database_version;
    };
  };
};
